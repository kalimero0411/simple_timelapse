#!/usr/bin/env bash
# set -x

# Default parameters
device=/dev/video0
int=3
outdir=~
name="timelapse_pics"
res=1280x720
frames=5
framerate=5

# Usage
function print_usage(){
printf "
simple_timelapse [OPTIONS]
	-d | --device	Recording device (default /dev/video0)
	-i | --interval	Interval between pictures in seconds (default 1)
	-p | --pictures	Total number of pictures to take (default 5; incompatible with --time)
	-t | --time	Total time in seconds (default 5; incompatible with --pictures)
	-o | --outdir	Output directory (default home directory)
	-r | --resolution	Resolution for the output pictures (default 1280x720)
	-n | --name	Base name of the pictures (default 'timelapse_pics')
	-f | --frames	Number of frames per picture (default 5)
	-e | --framerate	Frames per second in output video (default 5)
	-s | --timestamp	Put a timestamp at the bottom right
	-v | --verbose	Verbose output (default off)

"
}

while [ "$#" -gt 0 ]
do
arg=$1
 case $arg in
  -d | --device)
  device=$2
  shift 2
  ;;
  -i | --interval)
  int=$2
  shift 2
  ;;
  -p | --pictures)
  pics=$2
  shift 2
  ;;
  -t | --time)
  time=$2
  shift 2
  ;;
  -o | --outdir)
  outdir=$2
  shift 2
  ;;
  -r | --resolution)
  res=$2
  shift 2
  ;;
  -n | --name)
  name=$2
  shift 2
  ;;
  -f | --frames)
  frames=$2
  shift 2
  ;;
  -e | --framerate)
  framerate=$2
  shift 2
  ;;
  -s | --timestamp)
  timestamp=1
  shift
  ;;
  -v | --verbose)
  verbose=1
  shift
  ;;
  -h | --help)
  print_usage
  exit 1
  ;;
  *)
  if [ -f "$1" ]
  then
   break
  else
  echo "Unknown option: "$1
  print_usage
  exit 1
  fi
  ;;
 esac
done

# Check if fswebcam exists
if ! command -v fswebcam &> /dev/null
then
 echo "fswebcam not installed!"
 echo "Install using:"
 echo "sudo apt install fswebcam"
 exit 1
fi

# Check if ffmpeg exists
if ! command -v ffmpeg &> /dev/null
then
 echo "ffmpeg not installed!"
 echo "Install using:"
 echo "sudo apt install ffmpeg"
 exit 1
fi

# Default to 5 pictures
if [ -z ${pics+x} ] && [ -z ${time+x} ]
then
 pics=5
fi

# Create directory with images
mkdir --parents $(readlink --canonicalize $outdir)"/"$name"/pics"

# If number of pictures was selected
if [ ! -z ${pics+x} ]
then
pic_arr=($(seq --equal-width 1 $pics))
if [ ! -z ${verbose+x} ]
then
 echo "Device: "$device >> $(readlink /proc/$$/fd/2)
 echo "Interval: "$int" seconds" >> $(readlink /proc/$$/fd/2)
 echo "Pictures: "$pics >> $(readlink /proc/$$/fd/2)
 echo "Output directory: "$(readlink --canonicalize $outdir) >> $(readlink /proc/$$/fd/2)
 echo "Resolution: "$res >> $(readlink /proc/$$/fd/2)
 echo "Base name: "$name >> $(readlink /proc/$$/fd/2)
fi
for ((pic_num=0;pic_num<$pics;pic_num++))
do
 if [ ! -z ${verbose+x} ]; then echo "Image "$name"_"${pic_arr[$pic_num]}".png" >> $(readlink /proc/$$/fd/2); fi
 if [ ! -z ${timestamp+x} ]
 then
 fswebcam \
  --device $device \
  --resolution $res \
  --quiet \
  --text-colour "#FF0000" \
  --line-colour "#FF000000" \
  --banner-colour "#FF000000" \
  --timestamp "%d-%m-%Y %H:%M:%S (%Z)" \
  --png 9 \
  --frames $frames \
  --save $(readlink --canonicalize $outdir)"/"$name"/pics/"$name"_"${pic_arr[$pic_num]}.png
 else
  fswebcam \
  --device $device \
  --resolution $res \
  --quiet \
  --no-banner \
  --png 9 \
  --frames $frames \
  --save $(readlink --canonicalize $outdir)"/"$name"/pics/"$name"_"${pic_arr[$pic_num]}.png
 fi &&
 if [ $pic_num -lt "$(($pics - 1))" ]
 then
  if [ ! -z ${verbose+x} ]; then echo -e "Waiting "$int" seconds..." >> $(readlink /proc/$$/fd/2); fi
  sleep $int
 fi
done

else

# If total time was selected
start=$(date -u +%s)
pic_num=0
pics=$(($time / $int + 2))
pic_arr=($(seq --equal-width 1 $pics))
pic_time=($(seq 0 $int $time))
if [ $verbose -eq 1 ]
then
 echo "Device: "$device >> $(readlink /proc/$$/fd/2)
 echo "Interval: "$int" seconds" >> $(readlink /proc/$$/fd/2)
 echo "Time: "$time" seconds" >> $(readlink /proc/$$/fd/2)
 echo "Output directory: "$(readlink --canonicalize $outdir) >> $(readlink /proc/$$/fd/2)
 echo "Resolution: "$res >> $(readlink /proc/$$/fd/2)
 echo "Base name: "$name >> $(readlink /proc/$$/fd/2)
fi

while [ "$(($(date -u +%s) - $start))" -lt "$time" ]
do
 while [ "$(($(date -u +%s) - $start))" -lt "${pic_time[$pic_num]}" ]
 do
  sleep 0.25
 done
 if [ ! -z ${verbose+x} ]; then echo "Image "$name"_"${pic_arr[$pic_num]}".png" >> $(readlink /proc/$$/fd/2); fi
 if [ ! -z ${timestamp+x} ]
 then
 fswebcam \
  --device $device \
  --resolution $res \
  --quiet \
  --text-colour "#FF0000" \
  --line-colour "#FF000000" \
  --banner-colour "#FF000000" \
  --timestamp "%d-%m-%Y %H:%M:%S (%Z)" \
  --png 9 \
  --frames $frames \
  --save $(readlink --canonicalize $outdir)"/"$name"/pics/"$name"_"${pic_arr[$pic_num]}.png
 else
  fswebcam \
  --device $device \
  --resolution $res \
  --quiet \
  --no-banner \
  --png 9 \
  --frames $frames \
  --save $(readlink --canonicalize $outdir)"/"$name"/pics/"$name"_"${pic_arr[$pic_num]}.png
 fi &&
  ((pic_num++))
 done
fi

# Create timelapse video
if [ ! -z ${verbose+x} ]; then echo "Creating timelapse video..." >> $(readlink /proc/$$/fd/2); fi
sleep 3
ffmpeg \
-y \
-hide_banner \
-start_number 1 \
-loglevel warning \
-framerate $framerate \
-pattern_type glob \
-i $outdir/$name"/pics/*.png" \
-c:v libx264 \
-r $framerate \
-pix_fmt yuv420p \
$outdir"/"$name"/"$name"_timelapse.mp4"

